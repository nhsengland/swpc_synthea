{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Generating Primary Care Data Using UK Adaptation of Synthea","text":"<p>Primary care records are crucial for understanding healthcare interactions at both the population and individual levels. However, these records are difficult to obtain and integrate with other services, hindering innovation due to data unavailability and privacy concerns.</p> <p>Our project aims to address this by developing a code base to generate primary care electronic health records. We start by creating a synthetic population that mirrors a region in England (currently focusing on the South West of England), and then adapt the US-based tool Synthea for the English NHS context. We chose Synthea as it is already a highly developed, accuracy tested synthetic generator, and adapting it is relatively simple with clinical input. It is also highly efficient and quick to generate large amounts of data. </p> <p>See the data science website for more details on the aims of the project. </p>"},{"location":"#usage-and-limitations","title":"Usage and Limitations","text":"<p>The aim of Synthea is to produce data that is \"Realistic but not real.\" This means that data produced by Synthea can be used to trial systems, and to test software and procedures, but it should not be relied upon for every kind of statistical insight or analysis.</p> <p>The UK adaptation of Synthea has removed several features which were US specific, and integrates UK statistics. Details of the UK adaptations implemented can be found here.</p>"},{"location":"#evaluation","title":"Evaluation","text":"<p>The functionality and stability of the release has been \"smoke-tested\" by assuring valid outputs can be obtained when using various option flags described in the documentation. </p> <p>In the current release of the UK Adaptation of Synthea there have not been any statistical validations of outputs, but further testing is planned. </p>"},{"location":"hypertensiondataset/","title":"Sample Hypertension Dataset","text":"<p>Warning</p> <p>This sample dataset is a work in progress and not yet available.</p> <p>This dataset contains 1000 patients, run only through the hypertension module. This means the patients will have gone only through routine appointments, routine vaccinations, and hypertension diagnosis and treatment (if applicable to that specific patient). </p>"},{"location":"hypertensiondataset/#data-set-tables-descriptions","title":"Data set tables descriptions","text":"<p>Details on this dataset can be found in the attached technical output specification. </p> <p>Synthea Hypertension TOS File Download</p>"},{"location":"hypertensiondataset/#limitations","title":"Limitations","text":"<ul> <li>South West only: this proof-of-concept dataset is using demographics and healthcare providers exclusively from the South West of England. The processes for hypertension diagnosis and care are accurate to the UK NICE guidelines, but the  people demographics are from the South West and thus may not be accurate distributions for the rest of the UK. Sources for this data can be found here and in the subpages attached to it. </li> <li>Hypertension only: The only condition that has been adapted to be a UK process so far is hypertension, therefore, the pathway for hypertension is accurate, but no other disease pathways are included in the sample dataset. If you desire to have other diseases and don\u2019t mind that they include US pathways instead of following the NICE guidelines, contact us to get a cut of data that includes other pathways. </li> <li>Prescription medication brands: The types of medications prescribed when a patient in our dataset goes through the hypertension pathway are accurate to the NICE guidelines, however, the specific brands have been chosen randomly due to a lack of clinical input. If you have insight on which brands we should include, please raise an issue here with the details so that we can continue to improve this dataset. </li> </ul>"},{"location":"hypertensiondataset/#credits","title":"Credits","text":"<p>We would like to credit Synthea for the original framework of this synthetic data generator.</p>"},{"location":"outputs/","title":"Example of Outputs from swpc_sythea","text":"<p>For a current csv run the outputs are stored in the <code>outputs/csv</code> folder.   These output files include:</p> <ul> <li>allergies.csv </li> <li>careplans.csv</li> <li>conditions.csv </li> <li>devices.csv </li> <li>encounters.csv </li> <li>imaging_studies.csv </li> <li>immunizations.csv </li> <li>medications.csv </li> <li>observations.csv </li> <li>organizations.csv </li> <li>patients.csv </li> <li>procedures.csv </li> <li>providers.csv </li> <li>supplies.csv</li> </ul>"},{"location":"outputs/#showing-blood-test-reading-history-for-an-individual","title":"Showing blood test reading history for an individual","text":"<p>See this notebook for a walkthrough of an example.</p> <p>It will produce plots like this one: </p> <p></p>"},{"location":"outputs/#showing-total-activity-by-provider-and-location","title":"Showing total activity by provider and location","text":"<p>PLACEHOLDER</p>"},{"location":"outputs/#showing-total-number-of-patients-with-hypertension-by-time-within-the-entire-simulation","title":"Showing total number of patients with hypertension by time within the entire simulation","text":"<p>PLACEHOLDER</p>"},{"location":"ukadaptions/","title":"UK Adaptations to Synthea<sup>TM</sup>","text":"<p>Stage 1: Removing non-English NHS functions and simplifying the Java to an MVP</p> <p>Functions relating to:</p> <ul> <li>Flexporter (functionality which could be brought back later)</li> <li>Payers and related managers</li> <li>Insurance plans</li> <li>Claims (mostly for medications)</li> <li>Income, healthcare expenses and coverage</li> <li>Cost</li> <li>Exporting as DSTU2 or STU3</li> <li>Cardiovascular disease module (as this is a US-based calculator)</li> <li>ASCVD, Framingam and C19 Immunizations (as these are all US-based and not applicable)</li> <li>CMSStateCodeMapper</li> </ul> <p>These functions have all been commented using a <code>UKAdp</code> tag to keep an audit trail. These adaptions result in 113 sections of code commented out across 16 files (all within the <code>src/main/java/org/mitre/synthea/</code>).</p> <p>Stage 2: Adapting Resource files for UK South West Region context</p> <ul> <li>Replace demographics.csv with South West towns and cities</li> <li>Replace fipscodes.csv with County GSS codes</li> <li>Update social determinants of health (sdoh.csv) file with food insecurity, severe housing cost burdens, unemployment, and vehicle access values correct for the UK regions.</li> <li>Replace timezones.csv with GMT</li> <li>Replace zipcodes.csv with uk based postcodes</li> <li>Keep birthweights.csv as US version (for the moment)</li> <li>Keep bmi_correlations.json as US version (for the moment)</li> <li>Keep cdc_growth_charts.json as US version (for the moment)</li> <li>Keep gbd_disability_weights.csv as US version (for the moment)</li> <li>Update immunization_schedule.json to vaccine schedules used in the UK</li> <li>Update synthea.properties to remove unused exporter and payer functionality and amend inputs for South West Region.</li> <li>Reduce the care settings down to hospitals, primary care and urgent care, and update these to have South West facilities.</li> </ul> <p>There are still many US-based nuances that need to be dealt with such as payer columns still appearing in the outputs.</p> <p>Stage 3: Module Update</p> <p>The Hypertension module and the Hypertension medication module have been made based on the NICE guidelines for hypertension diagnosis, management and medication, together with some clinical input. However, they are still waiting on further clinical input, in particular for the choice of specific medications prescribed. </p> <p>Find documentation on the differences between NICE and the original US version of these modules at: <code>/docs/compare_hypertension_to_nice.pdf</code>.</p>"},{"location":"users/","title":"Generating a patient dataset with personalised configuration","text":""},{"location":"users/#set-up-swpc_synthea","title":"Set up swpc_synthea","text":"<p>See Readme.</p>"},{"location":"users/#creating-a-patient-dataset","title":"Creating a patient dataset","text":"<p>See the original Synthea documentation that can be found here.</p>"},{"location":"users/#synthea-properties","title":"Synthea Properties","text":"<p>The <code>src/main/resources/synthea.properties</code> file controls the main configuration of the simulation</p> <p>Here is a reduced view of the file for the main configuration options used in swpc_synthea and their default values</p> <pre><code>exporter.baseDirectory = ./output/\nexporter.use_uuid_filenames = false\nexporter.subfolders_by_id_substring = false\nexporter.years_of_history = 10\nexporter.metadata.export = true\nexporter.encoding = UTF-8\nexporter.csv.export = true\n\n# the number of patients to generate, by default\n# this can be overridden by passing a different value to the Generator constructor\ngenerate.default_population = 5\n\n# the number of threads to use for the generator, set the value to -1 to match the number of\n# available processors (as per Runtime.getRuntime().availableProcessors())\n# defaults to -1 if not specified\ngenerate.thread_pool_size = -1\n\ngenerate.log_patients.detail = simple\n# options are \"none\", \"simple\", or \"detailed\" (without quotes). defaults to simple if another value is used\n# none = print nothing to the console during generation\n# simple = print patient names once they are generated.\n# detailed = print patient names, attributes, vital signs, etc..  May slow down processing\n\ngenerate.timestep = 604800000\n# time is in ms\n# 1000 * 60 * 60 * 24 * 7 = 604800000\n\ngenerate.demographics.default_file = geography/demographics.csv\ngenerate.geography.postcodes.default_file = geography/postcodes.csv\ngenerate.geography.country_code = England\ngenerate.geography.timezones.default_file = geography/timezones.csv\ngenerate.geography.foreign.birthplace.default_file = geography/foreign_birthplace.json\ngenerate.geography.sdoh.default_file = geography/sdoh.csv\n\n# Lookup Table Folder location\ngenerate.lookup_tables = modules/lookup_tables/\n\n# if criteria are provided, (for example, only_dead_patients, only_alive_patients, or a \"patient keep module\" with -k flag)\n# this is the maximum number of times synthea will loop over a single slot attempting to produce a matching patient.\n# after this many failed attempts, it will throw an exception.\n# set this to 0 to allow for unlimited attempts (but be aware of the possibility that it will never complete!)\ngenerate.max_attempts_to_keep_patient = 1000\n\n# Probability of each person having a middle name. 0 is zero, 1.0 is 100% chance.\ngenerate.middle_names = 0.80\n\n# if true, the entire population will use veteran prevalence data\ngenerate.veteran_population_override = false\n\n# these should add up to 1.0\n# weighting and categories are inspired by the following but there are no specific hard numbers to point to\n# http://www.ncbi.nlm.nih.gov/pmc/articles/PMC1694190/pdf/amjph00543-0042.pdf\n# http://www.ncbi.nlm.nih.gov/pubmed/8122813\ngenerate.demographics.socioeconomic.weights.income = 0.2\ngenerate.demographics.socioeconomic.weights.education = 0.7\ngenerate.demographics.socioeconomic.weights.occupation = 0.1\n\ngenerate.demographics.socioeconomic.score.low = 0.0\ngenerate.demographics.socioeconomic.score.middle = 0.25\ngenerate.demographics.socioeconomic.score.high = 0.66\n\ngenerate.demographics.socioeconomic.education.less_than_hs.min = 0.0\ngenerate.demographics.socioeconomic.education.less_than_hs.max = 0.5\ngenerate.demographics.socioeconomic.education.hs_degree.min = 0.1\ngenerate.demographics.socioeconomic.education.hs_degree.max = 0.75\ngenerate.demographics.socioeconomic.education.some_college.min = 0.3\ngenerate.demographics.socioeconomic.education.some_college.max = 0.85\ngenerate.demographics.socioeconomic.education.bs_degree.min = 0.5\ngenerate.demographics.socioeconomic.education.bs_degree.max = 1.0\n\n# The average family size in the US is 3.13. The 2010 FPL for a 3-person household is $18310. Tuned it to $17550 for realistic medicaid/ACA enrollments.\ngenerate.demographics.socioeconomic.income.poverty = 17550\ngenerate.demographics.socioeconomic.income.high = 75000\n\ngenerate.birthweights.default_file = birthweights.csv\ngenerate.birthweights.logging = false\n\n# Providers\ngenerate.providers.hospitals.default_file = providers/hospitals.csv\n# --generate.providers.longterm.default_file = providers/longterm.csv\n# --generate.providers.nursing.default_file = providers/nursing.csv\n# --generate.providers.rehab.default_file = providers/rehab.csv\n# --generate.providers.hospice.default_file = providers/hospice.csv\n# --generate.providers.dialysis.default_file = providers/dialysis.csv\n# --generate.providers.homehealth.default_file = providers/home_health_agencies.csv\n# --generate.providers.veterans.default_file = providers/va_facilities.csv\ngenerate.providers.urgentcare.default_file = providers/urgent_care_facilities.csv\ngenerate.providers.primarycare.default_file = providers/primary_care_facilities.csv\n# --generate.providers.ihs.hospitals.default_file = providers/ihs_facilities.csv\n# --generate.providers.ihs.primarycare.default_file = providers/ihs_centers.csv\n\n# Provider selection behavior\n# How patients select a provider organization:\n#  nearest - select the closest provider. See generate.providers.maximum_search_distance\n#  random  - select randomly.\n#  network - select a random provider in your insurance network. same as random except it changes every time the patient switches insurance provider.\n#  medicare - select the nearest provider that can bill Medicare. If no Medicare provider is found, it defaults back to \"nearest\".\ngenerate.providers.selection_behavior = nearest\n\n# if a provider cannot be found for a certain type of service,\n# this will default to the nearest hospital.\ngenerate.providers.default_to_hospital_on_failure = true\n\n# Quit Smoking\nlifecycle.quit_smoking.baseline = 0.01\nlifecycle.quit_smoking.timestep_delta = -0.01\nlifecycle.quit_smoking.smoking_duration_factor_per_year = 1.0\n\n# Quit Alcoholism\nlifecycle.quit_alcoholism.baseline = 0.001\nlifecycle.quit_alcoholism.timestep_delta = -0.001\nlifecycle.quit_alcoholism.alcoholism_duration_factor_per_year = 1.0\n\n# Adherence\nlifecycle.adherence.baseline = 0.05\n\n# set this to true to enable randomized \"death by natural causes\"\n# highly recommended if \"only_dead_patients\" is true\nlifecycle.death_by_natural_causes = false\n\n# set this to enable \"death by loss of care\" or missed care,\n# e.g. not covered by insurance or otherwise unaffordable.\n# only functional if \"generate.payers.loss_of_care\" is also true.\nlifecycle.death_by_loss_of_care = false\n\n# Use physiology simulations to generate some VitalSigns\nphysiology.generators.enabled = false\n\n# Allow physiology module states to be executed\n# If false, all Physiology state objects will immediately redirect to the state defined in\n# the alt_direct_transition field\nphysiology.state.enabled = false\n\n# set to true to introduce errors in height, weight and BMI observations for people\n# under 20 years old\ngrowtherrors = false\n</code></pre>"},{"location":"users/#integrating-a-patient-dataset","title":"Integrating a patient dataset","text":"<p>PLACEHOLDER</p>"},{"location":"devs/dev/","title":"Developer Information","text":""},{"location":"devs/dev/#developer-setup","title":"Developer setup","text":"<p>Dev setup can be found in the original Synthea instructions.</p>"},{"location":"devs/dev/#development-types","title":"Development types","text":"<p>There are several types of development for the code:</p> <ul> <li> <p>To develop the underlying engine, refer to <code>java.md</code>.</p> </li> <li> <p>To update the foundational data driving the simulation, see the resources page].</p> </li> <li> <p>To design new disease modules, check out module creation page</p> </li> </ul>"},{"location":"devs/java/","title":"Java Source Code","text":""},{"location":"devs/java/#appjava","title":"App.java","text":"<p>The engine behind the simualtion is built in Java and can be seen in <code>src/main/java</code>.</p> <pre><code>\u251c\u2500\u2500 src/main/java \n|   \u251c\u2500\u2500 App.java \n</code></pre> <p>The App class provides a command-line interface to run the Synthea generation engine. It handles various command-line arguments to configure the simulation, including options for seeding, population size, date ranges, and other settings.  The class includes methods to display usage information and to parse and validate the command-line arguments. It then uses these arguments to configure and run the Synthea generator, which simulates patient health records.</p>"},{"location":"devs/java/#main-code-structure","title":"Main code structure","text":"<p>The rest of the Java code has the following structure and documentation is provided mostly through in-line comments.  </p> <pre><code>\u251c\u2500\u2500 src/main/java \n|   \u251c\u2500\u2500 App.java \n|   |   \u251c\u2500\u2500 org/mitre/synthea\n|   |   |   \u251c\u2500\u2500 editors\n|   |   |   \u251c\u2500\u2500 engine\n|   |   |   \u251c\u2500\u2500 export\n|   |   |   \u251c\u2500\u2500 helpers\n|   |   |   |   \u251c\u2500\u2500 physiology\n|   |   |   \u251c\u2500\u2500 identity\n|   |   |   \u251c\u2500\u2500 modules\n|   |   |   \u251c\u2500\u2500 world\n|   |   |   |   \u251c\u2500\u2500 agents\n|   |   |   |   |   \u251c\u2500\u2500 behaviors\n|   |   |   |   \u251c\u2500\u2500 concepts\n|   |   |   |   \u251c\u2500\u2500 geography\n|   |   |   |   |   \u251c\u2500\u2500 quadtree\n</code></pre> <p>A couple of key files to note include:</p>"},{"location":"devs/java/#enginegeneratorjava","title":"engine/Generator.java","text":"<p>The Generator class is responsible for simulating the creation of a population of people and their health records over time. The population is generated according to configurable options such as population size, seed for random number generation, location, and demographic criteria. The Generator supports multithreaded execution to speed up the simulation process.</p>"},{"location":"devs/java/#enginehealthrecordeditorjava","title":"engine/HealthRecordEditor.java","text":"<p>The HealthRecordEditor offers an interface that can be implemented to modify a Synthea Person's HealthRecord. At the end of every time step in the simulation, the Synthea framework will invoke the shouldRun method. If the shouldRun function returns true, the framework will then invoke the process method. The process method will be passed any encounters that were created in the past time step.</p> <p>HealthRecordEditors are intended to simulate actions that happen to an individual's health record. This includes loss or corruption of information through user entry error or information system defects.</p> <p>HealthRecordEditors SHOULD NOT be used to simulate clinical interactions on the underlying physical state / circumstances of the Synthea Person. Those should be implemented in Synthea modules.</p>"},{"location":"devs/java/#enginemodulejava","title":"engine/Module.java","text":"<p>Module represents the entry point of a generic module.</p> <p>The <code>modules</code> map is the static list of generic modules. It is loaded once per process, and the list of modules is shared between the generated population. Because we share modules across the population, it is important that States are cloned before they are executed. This keeps the \"master\" copy of the module clean.</p>"},{"location":"devs/java/#enginestatejava","title":"engine/State.java","text":"<p>The <code>State</code> class represents an abstract base class for different types of states in a simulation module within the Synthea framework. Each state represents a distinct event or action that occurs to a person (e.g., an encounter, condition onset, procedure, etc.) as part of the simulation of their healthcare journey.</p> <p>States define the logic for what happens to the person when they are processed by the simulation engine, including transitions to subsequent states based on conditions, time delays, and other factors. Subclasses of <code>State</code> implement specific behaviors and actions, such as recording a medical condition or administering a medication. </p>"},{"location":"devs/java/#enginetransitionjava","title":"engine/Transition.java","text":"<p>Transition represents all the transition types within the generic module framework.</p>"},{"location":"devs/java/#identityentityjava","title":"identity/Entity.java","text":"<p>This class represents a set of desired demographic information about a Person to be simulated. Typically in Synthea, a person's demographic information is made via random weighted selections and an individual stays in the same place for their entire life. An Entity can be used to specify demographic information. Additionally, information can be supplied that allows the simulation to mimic someone moving their primary place of residence.</p> <p>This class contains basic-level demographic information, such as date of birth and gender. More detailed information is contained in Seeds. Each Entity is made up of a list of Seeds, which represent the demographic information for a Person over a specified time range.</p> <p>As an example, a Person can have a seed to represent their birthplace. 10 years later, their family moves, so another seed would be added to their record reflecting their new address</p> <p>Seeds have one or more Variants. This is a representation of have the demographic information will be when placed in the exported health record. It can be used to represent data errors or variations typically seen in demographic information, such as nicknames, typos, old addresses, etc.</p>"},{"location":"devs/java/#modules","title":"modules/","text":"<p>Various java files for some of the default modules including <code>BloodPressureValueGenerator</code>, <code>DeathModule</code>, and the <code>EncounterModule</code> which defines the threshold for which a patient seeks symptom-driven care.</p>"},{"location":"devs/java/#worldagents","title":"world/agents/","text":"<p>Files for creating new clinicians, persons and providers.</p>"},{"location":"devs/java/#worldgeography","title":"world/geography","text":"<p>Ingests the geography information for locations and places.</p>"},{"location":"devs/modules/","title":"Creating a New Disease Module in Synthea","text":""},{"location":"devs/modules/#introduction","title":"Introduction","text":"<p>This guide will walk you through the steps to create a new disease module in the Synthea synthetic data generator.</p>"},{"location":"devs/modules/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic knowledge of JSON</li> <li>Familiarity with Synthea's module framework</li> <li>NICE guidelines for the pathway you want a module for </li> </ul>"},{"location":"devs/modules/#pre-work","title":"Pre-work","text":"<p>We recommend starting by creating a flow diagram of the NICE pathway. Consider every condition that might lead to different pathways, and every interaction with the healthcare system (e.g., measurements, tests, appointments, diagnoses, etc.). This will serve as a foundation for developing your module. You can find example flow charts here.</p>"},{"location":"devs/modules/#steps","title":"Steps","text":""},{"location":"devs/modules/#1-define-the-module","title":"1. Define the Module","text":"<p>Create a new JSON file in the <code>src/main/resources/modules</code> directory. Name it appropriately, e.g., <code>my_new_disease.json</code>.</p>"},{"location":"devs/modules/#2-structure-the-module","title":"2. Structure the Module","text":"<p>A Synthea module consists of states and transitions. Here is a basic structure:</p> <pre><code>{\n    \"name\": \"My New Disease\",\n    \"states\": {\n        \"Initial\": {\n            \"type\": \"Initial\",\n            \"direct_transition\": \"DiseaseOnset\"\n        },\n        \"DiseaseOnset\": {\n            \"type\": \"ConditionOnset\",\n            \"target_encounter\": \"encounter\",\n            \"codes\": [\n                {\n                    \"system\": \"SNOMED-CT\",\n                    \"code\": \"123456\",\n                    \"display\": \"My New Disease\"\n                }\n            ],\n            \"direct_transition\": \"Terminal\"\n        },\n        \"Terminal\": {\n            \"type\": \"Terminal\"\n        }\n    }\n}\n</code></pre>"},{"location":"devs/modules/#3-add-states-and-transitions","title":"3. Add States and Transitions","text":"<p>Define the states and transitions that represent the progression of the disease. Common states include <code>ConditionOnset</code>, <code>Symptom</code>, <code>Encounter</code>, and <code>MedicationOrder</code>. If wanting to define these in a more visual way without needing to write out all the json, try using the Synthea Module Builder and exporting out the json when you're done. </p>"},{"location":"devs/modules/#4-check-test-the-module","title":"4. Check &amp; Test the Module","text":"<p>Run the simulation with only your module and the base modules active to ensure everything is functioning correctly.</p> <p>To easily observe the data, modify the <code>synthea.properties</code> file by setting <code>exporter.csv.export = true</code>. This enables data export in CSV format. Once done, execute the command below to run the simulation.</p> <pre><code>./run_synthea -m my_new_disease\n</code></pre>"},{"location":"devs/modules/#6-iterate-and-improve","title":"6. Iterate and Improve","text":"<p>Review the generated data and refine your module as needed.</p> <p>For more detailed information, refer to the Synthea Module Builder documentation and the Generic Module Framework.</p>"},{"location":"devs/modules/#tips-tricks","title":"Tips &amp; Tricks","text":"<ul> <li>Try your module with made up diagnoses that are easy to spot in your data for ease of testing</li> <li>Test as you go! Don't build the whole module &amp; only then test.</li> </ul>"},{"location":"devs/modules/#example-flowchart","title":"Example Flowchart","text":"<p>These are some example flow charts for the hypertension diagnosis &amp; management NICE guidelines:</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"devs/resources/","title":"Resources in swpc_synthea","text":"<p>The structure of the resources in swpc_synthea is as below:</p> <pre><code>\u251c\u2500\u2500 src/main/resources\n|   \u251c\u2500\u2500 export\n|   \u251c\u2500\u2500 geography\n|   |   \u251c\u2500\u2500 demographics.csv\n|   |   \u251c\u2500\u2500 foreign_birthplace.json\n|   |   \u251c\u2500\u2500 postcodes.csv\n|   |   \u251c\u2500\u2500 sdoh.csv\n|   |   \u251c\u2500\u2500 timezones.csv\n|   \u251c\u2500\u2500 keep_modules\n|   \u251c\u2500\u2500 modules\n|   \u251c\u2500\u2500 physiology\n|   |   \u251c\u2500\u2500 hospitals.csv\n|   |   \u251c\u2500\u2500 primary_care_facilities.csv\n|   |   \u251c\u2500\u2500 urgent_care_facilities.csv\n|   \u251c\u2500\u2500 providers\n|   \u251c\u2500\u2500 templates\n|   biometrics.yml\n|   birthweights.csv\n|   bmi_correlations.json\n|   cdc_growth_charts.json\n|   cdc_wtleninf.csv\n|   gdb_disability_weights.csv\n|   growth_data_error_rates.json\n|   htn_drugs.csv\n|   immunization_schedule.json\n|   language_lookup.json\n|   names.yml\n|   nhanes_two_year_olds_bmi.csv\n|   race_ethnicity_codes.json\n|   shr_mapping.csv\n|   telemedicine_config.json\n|   us_core_mapping.csv\n</code></pre> <p>We'll now highlight a few key files for the simulation inputs</p>"},{"location":"devs/resources/#geographydemographicscsv","title":"geography/demographics.csv","text":"<p>This file sets the general demographics for the population created during this simulation, such as age distributions and town populations. The meanings of the different columns in this file can be found in the table below. </p> <p>The demographics breakdowns for the UK version have been done by the full region rather than per town as information per town was not available. </p> Column Name Contains Data Sources for UK Version ID Town ID number monotonically increasing from 1 COUNTY County Code where town is located TOWN_211CODE column from ONS data table NAME Town Name TOWN_211NAME column from above ONS table STNAME Region Name REGION/COUNTRY from above ONS table POPESTIMATE2015 Population of that town TOTAL population rows for 2019 from above ONS data CTYNAME County Name where town is located range of wikipedia sites for the towns TOT_POP total county population ONS Region data Ethnicity (includes ASIAN, BLACK, MIXED, WHITE, OTHER columns) Percentage of the population that is of a certain ethnicity<sup>1</sup> NHS Health Survey England Ages (includes all age breakdown columns) percentage of population in different age groups Another NHS Health Survey England<sup>2</sup> Income (includes all income breakdown columns) percentage of population in different income brackets ONS Employment data<sup>3</sup> LESS_THAN_HS fraction of people with no qualifications, or level 1 or 2 of education (as classified by ONS) ONS Education data HS_DEGREE fraction of people with level 3 education Same as above SOME_COLLEGE fraction of people with apprenticeships Same as above BS_DEGREE fraction of people with level 4 education Same as above <p>Many of the above sources are complimented by data from the 2021 census</p>"},{"location":"devs/resources/#geographysdohcsv","title":"geography/sdoh.csv","text":"<p>This file contains information on social determinants of health for the different regions.</p> Column Name Contains Data Sources for UK Version FOOD_INSECURITY percentage of people with food insecurity Sheffield University study SEVERE_HOUSING_COST_BURDEN percentage of people with severe housing cost burden <sup>4</sup> Government English housing survey UNEMPLOYMENT percentage of unemployment ONS local labour market data NO_VEHICLE_ACCESS percentage of the population with no access to a vehicle ONS census data"},{"location":"devs/resources/#geographypostcodescsv","title":"geography/postcodes.csv","text":"<p>Originally called zipcodes.csv but changed to use the English word. Postcode data was found here. </p>"},{"location":"devs/resources/#modules","title":"modules/","text":"<p>Store for the clinical modules saved as jsons.  Most of these are currently based on the original US Synthea<sup>TM</sup> version.  See index.md for a list of changed modules.</p>"},{"location":"devs/resources/#providers","title":"providers/","text":"<p>These files set different medical facilities for patients to attend in the simulation. </p> <p>GP practices in the South West were found in the NHS digital GP Practice Data, and the conversion from postcode to latitude and longitude was done using the grid reference finder. </p> <ol> <li> <p>Ethnicity categories were changed from the American version to align better with UK ethnicity breakdowns\u00a0\u21a9</p> </li> <li> <p>Under 18 ages set to 0 as we are only interested in an adult population currently.\u00a0\u21a9</p> </li> <li> <p>Income brackets don't match exactly, and so estimations of the breakdowns within the brackets used in Synthea had to be done.\u00a0\u21a9</p> </li> <li> <p>We used data on mortgagors who found affording their mortgage very or fairly difficult (table AT2_8) plus renters who found affording their rent very or fairly difficult over the total number of people surveyed in the study used. This data was only available for the whole country.\u00a0\u21a9</p> </li> </ol>"}]}